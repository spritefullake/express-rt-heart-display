#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('heart-mon:server');
var http = require('http');
const WebSocket = require('ws');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/** setup websockets on top of http */

//initialize the WebSocket server instance
const wss = new WebSocket.Server({ server });
let myData = [];
wss.on('connection', (ws) => {

    //connection is up, let's add a simple simple event
    ws.on('message', (message) => {
        let parse = message.split(",");
        myData = myData.concat(parse);
        //log the received message and send it back to the client
        console.log(`The array is ${myData.length}`);
        ws.send(`Hello, you sent -> ${message}`);
        //send to browser client
        wss.clients.forEach(function each(client) {
          if (client !== ws && client.readyState == WebSocket.OPEN) {
            client.send(JSON.stringify(myData));
          };
        });
    });

    //send immediatly a feedback to the incoming connection    
    ws.send('Hi there, I am a WebSocket server');
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0', function () {
  console.log(`Listening to port:  ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
/*
var os = require( 'os' );

var networkInterfaces = os.networkInterfaces( );

console.log( networkInterfaces );
*/