#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('heart-mon:server');
var http = require('http');
const url = require('url');

const WebSocket = require('ws');
const { execArgv } = require('process');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/** setup websockets on top of http */

//initialize the WebSocket server instance
const wss = new WebSocket.Server({ server });
var allData = [];
let bufferCounter = 0;
const bufferLimit = 10;
wss.on('connection', (ws, req) => {
  console.log(req.url)
  //only send data to the browser display
  if (req.url == "/?client=display") {
    //connection is up, let's add a simple simple event
    ws.id = "display";
  }
  else if (req.url == "/?client=source") {
    //register the ecg source device
    ws.id = "source";
  }

  ws.on('message', message => {
    if(ws.id == "display" && message == "download"){
      ws.send(JSON.stringify({type: "download", data: allData}));
    }
    //log the received message and send it back to the client
    //ws.send(`Hello, you sent -> ${message}`);
    allData.push(message);
    if(++bufferCounter === bufferLimit){
      bufferCounter = 0;
    }
    wss.clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN && client.id === "display" && bufferCounter === 0) {
        sendECG(client, allData);
      }
    });

  });

  //send immediatly a feedback to the incoming connection    
  ws.send(JSON.stringify({ type: "string", data: "I am the WebSocket!" }));
});

/** send only a slice of the ecg data to the browser client */
function sendECG(ws, data) {
  const windowLength = 100;
  const frame = data
    .filter(value => !isNaN(Number(value)))
    .slice(-windowLength);
  ws.send(JSON.stringify({ type: "ecg", data: frame }));
}
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0', function () {
  console.log(`Listening to port:  ${port}`);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}